package Euler;

/*
 * 问题:求0~9数字构成的数字中第100万个数字
 * 	排序方式为从小到大
 * 方案:
 * 	10！=3,628,800 9!=362,880
 * 	一百万小于10！且大于9！因此所求数字第一位是2
 * 	第一百个数字是2开头的第1,000,000%362,880位数字
 * 	求3开头的第362,880-1,000,000%362,880-1位数字计算量更小
 * 
 * 
 */


public class LexicographicPermutations {
	public static void main(String[] args) {
		double time = System.currentTimeMillis();
		
		String str = "2987654310";
		
		int max = 1000000%362880;
		max = 362880-max;
		for(int i = 0; i<max ; i++){
			System.out.println("第"+i+"个数字->"+str);
			str = getNumber(str);
		}
		
		
		System.out.println(System.currentTimeMillis()-time+"ms");
	}
	
	private static String getNumber(String inNumber){
		long number = Long.parseLong(inNumber)-1;
		String str = number+"";
		while(!isLegal(str)){
			number--;
			str = number+"";
		}
		return str;
	}
	private static boolean isLegal(String number){
		for(int i = 0; i<10 ;i++){
			if(!number.contains(i+""))
				return false;
			else
				continue;
		}
		return true;
	}
}	
